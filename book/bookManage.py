# -*- coding: utf-8 -*-
#图书信息维护模块
# Form implementation generated from reading ui file '图书信息维护.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QModelIndex
from PyQt5.QtWidgets import QWidget, QApplication, QAbstractItemView, QSizePolicy, QHeaderView, QTableWidgetItem, \
    QMessageBox

from dao import bookTypeDao, bookDao
from entity.BookModel import Book


class Ui_Form(QWidget):

    def __init__(self):
        super(Ui_Form,self).__init__()
        self.setWindowFlag(QtCore.Qt.WindowType.MSWindowsFixedSizeDialogHint) #只显示最小化和关键按钮
        self.setupUi(self)
        self.initBookTypeLisComBox()  #初始化下拉框
        self.initTable() #初始表单

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(851, 659)
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setGeometry(QtCore.QRect(30, 161, 791, 161))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(30, 30, 791, 91))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(40, 40, 72, 15))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(280, 40, 72, 15))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(470, 40, 72, 15))
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(110, 40, 151, 21))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setGeometry(QtCore.QRect(360, 40, 91, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(550, 40, 141, 22))
        self.comboBox.setObjectName("comboBox")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(720, 40, 51, 28))
        self.pushButton.setObjectName("pushButton")

        #绑定搜索按钮
        self.pushButton.clicked.connect(self.initTable)

        self.groupBox_2 = QtWidgets.QGroupBox(Form)
        self.groupBox_2.setGeometry(QtCore.QRect(30, 340, 791, 291))
        self.groupBox_2.setObjectName("groupBox_2")
        self.label_4 = QtWidgets.QLabel(self.groupBox_2)
        self.label_4.setGeometry(QtCore.QRect(40, 40, 41, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.groupBox_2)
        self.label_5.setGeometry(QtCore.QRect(270, 40, 72, 15))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.groupBox_2)
        self.label_6.setGeometry(QtCore.QRect(490, 40, 72, 15))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox_2)
        self.label_7.setGeometry(QtCore.QRect(40, 90, 41, 16))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.groupBox_2)
        self.label_8.setGeometry(QtCore.QRect(270, 90, 72, 15))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.groupBox_2)
        self.label_9.setGeometry(QtCore.QRect(490, 90, 72, 15))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.groupBox_2)
        self.label_10.setGeometry(QtCore.QRect(40, 160, 41, 16))
        self.label_10.setObjectName("label_10")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_3.setGeometry(QtCore.QRect(110, 40, 113, 21))
        self.lineEdit_3.setObjectName("lineEdit_3")

        #将编号框设置为灰色
        self.lineEdit_3.setReadOnly(True)
        self.lineEdit_3.setStyleSheet("background-color:gray")

        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_4.setGeometry(QtCore.QRect(350, 40, 113, 21))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_5.setGeometry(QtCore.QRect(110, 90, 113, 21))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_6.setGeometry(QtCore.QRect(350, 90, 113, 21))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.groupBox_2)
        self.plainTextEdit.setGeometry(QtCore.QRect(110, 146, 631, 71))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 240, 93, 28))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../image/modify.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon)
        self.pushButton_2.setObjectName("pushButton_2")

        #修改按钮点击事件
        self.pushButton_2.clicked.connect(self.update)

        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_3.setGeometry(QtCore.QRect(240, 240, 93, 28))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../image/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon1)
        self.pushButton_3.setObjectName("pushButton_3")

        #绑定删除按钮
        self.pushButton_3.clicked.connect(self.delete)

        self.radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton.setGeometry(QtCore.QRect(580, 40, 41, 19))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_2.setGeometry(QtCore.QRect(630, 40, 41, 19))
        self.radioButton_2.setObjectName("radioButton_2")

        #默认选中女
        self.radioButton_2.setChecked(True)

        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox_2.setGeometry(QtCore.QRect(580, 90, 161, 22))
        self.comboBox_2.setObjectName("comboBox_2")

        #设置行点击事件
        self.tableWidget.clicked.connect(self.initForm)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "图书信息维护"))
        self.groupBox.setTitle(_translate("Form", "查询操作"))
        self.label.setText(_translate("Form", "图书名称："))
        self.label_2.setText(_translate("Form", "图书作者："))
        self.label_3.setText(_translate("Form", "图书类别："))
        self.pushButton.setText(_translate("Form", "搜索"))
        self.groupBox_2.setTitle(_translate("Form", "表单操作"))
        self.label_4.setText(_translate("Form", "编号："))
        self.label_5.setText(_translate("Form", "图书名称："))
        self.label_6.setText(_translate("Form", "作者性别："))
        self.label_7.setText(_translate("Form", "价格："))
        self.label_8.setText(_translate("Form", "图书作者："))
        self.label_9.setText(_translate("Form", "图书类别："))
        self.label_10.setText(_translate("Form", "描述："))
        self.pushButton_2.setText(_translate("Form", "修改"))
        self.pushButton_3.setText(_translate("Form", "删除"))
        self.radioButton.setText(_translate("Form", "男"))
        self.radioButton_2.setText(_translate("Form", "女"))


    #初始化下拉框数据
    def initBookTypeLisComBox(self):
        bookTypeList=bookTypeDao.list("") #获取图书类别信息
        self.comboBox.addItem("请选择图书类别！",-1)
        self.comboBox_2.addItem("请选择图书类别！", -1)
        for bookType in bookTypeList:
            self.comboBox.addItem(bookType[1],bookType[0])
            self.comboBox_2.addItem(bookType[1], bookType[0])

    #初始化表格
    def initTable(self):
        """
        根据条件初始化表格
        :param self:
        :return:
        """
        bookName=self.lineEdit.text()
        author=self.lineEdit_2.text()
        bookTypeId=self.comboBox.currentData()
        s_book=Book(bookName,author,bookTypeId)
        result = bookDao.list(s_book)
        row = 0 #表格初始化0
        if result:
            row = len(result)
        self.tableWidget.setColumnCount(7)  #列
        self.tableWidget.setRowCount(row) #行
        self.tableWidget.verticalHeader().setVisible(False) #隐藏垂直标题 序号
        self.tableWidget.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers) #禁止编辑单元格
        self.tableWidget.setSizePolicy(QSizePolicy.Policy.Expanding,QSizePolicy.Policy.Expanding) #
        self.tableWidget.setHorizontalHeaderLabels(['编号','图书名称','图书作者','图书类别','作者性别','图书价格','图书描述']) #列标签
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch) #列头自适应
        self.tableWidget.setSelectionBehavior(
            QAbstractItemView.SelectionBehavior.SelectRows #设置行的选择行为，以行为单位
        )

        for i in range(row): #行
            for j in range(7):  #列
                data=QTableWidgetItem(str(result[i][j])) #封装数据，第i行j列
                self.tableWidget.setItem(i,j,data)

    #表格点击事件获取数值  初始化
    def initForm(self,index:QModelIndex):  #点击事件获取回调index
        rowIndex=index.row() #获取行索引
        self.lineEdit_3.setText(self.tableWidget.item(rowIndex,0).text())#设置id编号
        self.lineEdit_4.setText(self.tableWidget.item(rowIndex, 1).text())  # 设置图书名称
        self.lineEdit_6.setText(self.tableWidget.item(rowIndex, 2).text())  # 设置图书作者
        self.comboBox_2.setCurrentText(self.tableWidget.item(rowIndex, 3).text())  #设置图书类别
        if self.tableWidget.item(rowIndex,4).text()=='男':  #性别
            self.radioButton.setChecked(True)
        else:
            self.radioButton_2.setChecked(True)
        self.lineEdit_5.setText(self.tableWidget.item(rowIndex, 5).text())  # 设置图书价格
        self.plainTextEdit.setPlainText(self.tableWidget.item(rowIndex, 6).text())  # 设置图书描述


    #重置表单
    def resetForm(self):
        self.lineEdit_3.setText("")
        self.lineEdit_4.setText("")
        self.lineEdit_6.setText("")
        self.comboBox_2.setCurrentText("")
        self.radioButton_2.setChecked(True)
        self.lineEdit_5.setText("")
        self.plainTextEdit.setPlainText("")

    #修改表单
    def update(self):
        id=self.lineEdit_3.text()
        if id.strip()=="":
            QMessageBox.warning(None,'系统提示','请选中需要编辑的那一行记录！')
            return
        bookName=self.lineEdit_4.text()
        if bookName.strip()=="":
            QMessageBox.warning(None, '系统提示', '请输入图书名称！')
            return
        sex='女'
        if self.radioButton.isChecked():
            sex='男'
        price=self.lineEdit_5.text()
        if price.strip()=="":
            QMessageBox.warning(None, '系统提示', '请输入图书价格！')
            return
        author=self.lineEdit_6.text()
        if author.strip()=="":
            QMessageBox.warning(None, '系统提示', '请输入图书作者！')
            return
        bookTypeId=self.comboBox_2.currentData()
        if bookTypeId==-1:
            QMessageBox.warning(None, '系统提示', '请选择图书类别！')
            return
        bookDesc=self.plainTextEdit.toPlainText()
        book=Book.my_constructor2(id,bookName,author,sex,price,bookTypeId,bookDesc)
        if bookDao.update(book)>0:
            QMessageBox.information(None,'系统提示','修改成功！')
            self.initTable()
            self.resetForm() #重置
        else:
            QMessageBox.information(None, '系统提示', '修改失败！')

    #删除
    def delete(self):
        id = self.lineEdit_3.text()
        if id.strip() == "":
            QMessageBox.warning(None, '系统提示', '请选中需要删除的那一行记录！')
            return
        reply=QMessageBox.question(self,'系统提示','您确定要删除这条记录吗？',QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                             QMessageBox.StandardButton.No) #确认框
        if reply==QMessageBox.StandardButton.Yes:
                if bookDao.delete(id)>0:
                    QMessageBox.information(None,'系统提示','删除成功！')
                    self.initTable()
                    self.resetForm()
                else:
                    QMessageBox.information(None, '系统提示', '删除失败！')

if __name__ == '__main__':
    app=QApplication(sys.argv)
    ui=Ui_Form()
    ui.show()

    sys.exit(app.exec())